AGBGM <- read.csv("D:/Users/soates/Desktop/foobar/AGBGM.csv")
View(AGBGM)
AGBRC <- read.csv("D:/Users/soates/Desktop/foobar/AGBRC.csv")
View(AGBRC)
Mods<-read.csv("ModList.csv", header=T, skip=8)
BUD<-read.csv("BUD.csv", header=T, skip=1)
BUS<-read.csv("BUS.csv", header=T, skip=2)
CUD<-read.csv("CUD.csv", header=T, skip=9)
GMod<-read.csv("GMod.csv", header=T, skip=8)
library(dplyr)
library(stringr)
Mods<-read.csv("~/BudgetConferencing/ModList.csv", header=T, skip=8)
BUD<-read.csv("~/BudgetConferencing/BUD.csv", header=T, skip=1)
BUS<-read.csv("~/BudgetConferencing/BUS.csv", header=T, skip=2)
CUD<-read.csv("~/BudgetConferencing/CUD.csv", header=T, skip=9)
GMod<-read.csv("~/BudgetConferencing/GMod.csv", header=T, skip=8)
GMod<-GMod[-nrow(GMod),]
BUD<-BUD[-nrow(BUD),]
BUS<-BUS[-nrow(BUS),]
BUS<-BUS[-nrow(BUS),]
BUS<-BUS[-nrow(BUS),]
BUS<-BUS[-nrow(BUS),]
BUS<-BUS[-1,]
Mods<-Mods[-nrow(Mods),]
RCMods<-filter(Mods, Enterprise=="Budget Conferencing_Exter")
RCemails<-select(RCMods, ClientID, Email, Mod.Phone, Address, City, Zip, Moderator.First.Name, Moderator.Last.Name)
GMemails<-select(GMod, ClientID, Email, Mod.Phone, Address, City, Zip)
AGBRC$Start<-paste(AGBRC$StartDate, AGBRC$StartTime)
AGBRC$Start<-as.numeric(as.POSIXct(AGBRC$Start, format="%d/%m/%Y %H:%M:%S"))
AGBGM$Start<-paste(AGBGM$StartDate, AGBGM$StartTime)
AGBGM$Start<-as.numeric(as.POSIXct(AGBGM$Start, format="%d/%m/%Y %H:%M:%S"))
blahRC<-select(AGBRC, -c(TerritoryCode, SalesRepName,BillToID, Region, EnterpriseID, EnterpriseName, PONumber, UNIQUEROWID, StartDate, StartTime, EndDate, EndTime))
testRC<-left_join(blahRC, RCemails)
testRC<-select(testRC, ClientID, ModeratorName, CompanyID, CompanyName, ConferenceID, Duration, DNIS,
DNIS, NumberDialed, DNISDesc, Description, CallerID, CallerType, Bridge, UNIQUECONFID, Start, Email, Moderator.First.Name, Address, Zip,
Moderator.Last.Name, City, Mod.Phone)
colnames(testRC)<-c("Prop:Client ID foo", "Prop:Moderator Name foo", "Prop:Company ID foo", "Prop:Company Name foo",
"Prop:Conference ID foo", "Prop:Duration foo",
"Prop:DNIS foo", "Prop: Number Dialed foo", "Prop:DNIS Desc foo", "Prop:Description foo", "Prop:Caller ID foo",
"Prop:Caller Type foo", "Prop:Bridge foo", "Prop:Unique Conference ID foo", "Timestamp", "Identity", "Prop:First Name foo", "Prop:Address foo",
"Prop:Postcode foo",
"Prop:Last Name foo", "Prop:Suburb foo", "Prop:Moderator Phone Number foo")
testRC$Event<-"Conference foo"
blahGM<-select(AGBGM, -c(TerritoryCode, SalesRepName,BillToID, Region, EnterpriseID, EnterpriseName, PONumber, UNIQUEROWID, StartDate, StartTime, EndDate,
EndTime))
unique(blahGM$ClientID)
summary(blahGM$ClientID)
summary(blahGM)
summary(GMemails)
blahGM$CallerID[which(blah$CallerID=="")]<-"Unknown"
blahGM$CallerID[which(blah$CallerID=="")]<-"Blocked"
blahGM$CallerID[which(blahGM$CallerID=="")]<-"Blocked"
blahGM$CallerID[which(blahGM$CallerID==" ")]<-"Blocked"
table(blahGM$CallerID)
summary(blahGM$CallerID)
blahGM$CallerID[which(blahGM$CallerID==NA)]<-"Blocked"
blahGM$CallerID[is.na(blahGM$CallerID)]<-"Blocked"
blahGM$CallerID[which(blahGM$CallerID==NA),]<-"Blocked"
blahGM$CallerID[which(is.na(blahGM$CallerID)),]<-"Blocked"
blahGM$CallerID[which(is.na(blahGM$CallerID)==T),]<-"Blocked"
blahGM[which(is.na(blahGM$CallerID)==T),]<-"Blocked"
blahGM$CallerID[which(is.na(blahGM$CallerID)==T),]<-"Blocked"
blahGM$CallerID<-str_replace_all(blahGM$CallerID, NA, "Blocked")
blahGM$CallerID<-str_replace_all(blahGM$CallerID, "NA", "Blocked")
summary(blahGM)
blahGM<-str_replace_all(blahGM, "NA", "Blocked")
blah[is.na(blah)]<-"Unknown"
blahGM[is.na(blahGM)]<-"Unknown"
install.packages("MASS")
library(RSelenium)
?RSelenium
?remoteDriver
library(dplyr)
library(stringr)
install.packages("maps")
install.packages("mapdata")
library(map)
library(maps)
library(mapdata)
map('worldHires')
map('worldHires', "Australia")
map('worldHires', "Australia", "Sydney")
map('worldHires', c("Australia", "Sydney")
)
?map
map('worldHires', "Australia", fill=T)
Socceroos <- read.csv("D:/Users/soates/Downloads/Socceroos.csv")
View(Socceroos)
map('worldHires', Socceroos$League, fill=T)
map('worldHires', Socceroos$League, fill=T, col="red")
map('worldHires', Socceroos$League, fill=T, col=c("red", "blue"))
map('worldHires', Socceroos$League, fill=T, col=c("red", "blue"))
map('worldHires')
map('worldHires', Socceroos$League, fill=T, col=c("red", "blue"), boundary=T)
map('worldHires', Socceroos$League, col=c("red", "blue"), boundary=T)
map('worldHires', Socceroos$League, col=c("red", "blue"), boundary=F)
SoO2014 <- read.delim("D:/Users/soates/Desktop/SoO2014.tsv")
View(SoO2014)
SoO2014 <- read.delim("D:/Users/soates/Desktop/SoO2014.tsv")
View(SoO2014)
?table
SO<-SoO2014
table(SO$AUS2013~SO$State)
table(SO$AUS2013,SO$State)
table(SO$State, SO$AUS2013)
plot(table(SO$State, SO$AUS2013))
library(dplyr)
library(stringr)
library(ggplot2)
library(knitr)
library(mapdata)
library(maps)
map("worldHires", "Queensland")
map("worldHires", "Australia")
map("worldHires", "Australia:Tasmania")
map("worldHires", "Australia:New South Wales")
map("worldHires", "Australia:Queensland")
map("worldHires", c("Australia",Australia:Queensland"))
)
map("worldHires", c(regions="Australia",Australia:Queensland"))
""
map("worldHires", c(regions="Australia","Australia:Queensland"))
map("worldHires", "Australia:Tasmainia")
install.packages("oz")
library(oz)
oz()
oz(6)
ozRegion()
library(ggplot2)
load("ozdata.rda"
)
nsw()
nsw()
oz()
nsw()
qld()
oz(sections=c(3, 4))
oz(sections=c(3, 4))
library(maptools)
install.packages("maptools")
library(maptools)
install.packages("rgeos")
library(maptools)
aus<-readShapePoly("aust_states.shp")
aus<-readShapePoly("D:/Users/soates/Desktop/SO/aust_states.shp")
install.packages("caret")
install.packages(c("maptools", "Rcpp", "rgeos"))
install.packages("hts")
install.packages(c("mice", "wordcloud"))
install.packages("Matrix")
install.packages("BradleyTerry2")
install.packages(c("ggvis", "rgl"))
setwd("~/GitHub/srepho.github.io")
churn <- read.csv("D:/Users/soates/Downloads/churn.txt")
View(churn)
library(plyr)
library(dplyr)
library(ggplot2)
library(reshape2)
library(caret)
trainIndex <- createDataPartition(churn$Churn., p = .5, list = FALSE, times = 1)
282/(1425+242)
set.seed(12)
trainIndex <- caret::createDataPartition(churn$Churn., p = .5, list = FALSE, times = 1)
churnTrain <- churn[ trainIndex,]
churnTest <- churn[-trainIndex, ]
churn$Area.Code<-as.factor(churn$Area.Code)
library(stringr)
