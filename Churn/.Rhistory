AGBGM <- read.csv("D:/Users/soates/Desktop/foobar/AGBGM.csv")
View(AGBGM)
AGBRC <- read.csv("D:/Users/soates/Desktop/foobar/AGBRC.csv")
View(AGBRC)
Mods<-read.csv("ModList.csv", header=T, skip=8)
BUD<-read.csv("BUD.csv", header=T, skip=1)
BUS<-read.csv("BUS.csv", header=T, skip=2)
CUD<-read.csv("CUD.csv", header=T, skip=9)
GMod<-read.csv("GMod.csv", header=T, skip=8)
library(dplyr)
library(stringr)
Mods<-read.csv("~/BudgetConferencing/ModList.csv", header=T, skip=8)
BUD<-read.csv("~/BudgetConferencing/BUD.csv", header=T, skip=1)
BUS<-read.csv("~/BudgetConferencing/BUS.csv", header=T, skip=2)
CUD<-read.csv("~/BudgetConferencing/CUD.csv", header=T, skip=9)
GMod<-read.csv("~/BudgetConferencing/GMod.csv", header=T, skip=8)
GMod<-GMod[-nrow(GMod),]
BUD<-BUD[-nrow(BUD),]
BUS<-BUS[-nrow(BUS),]
BUS<-BUS[-nrow(BUS),]
BUS<-BUS[-nrow(BUS),]
BUS<-BUS[-nrow(BUS),]
BUS<-BUS[-1,]
Mods<-Mods[-nrow(Mods),]
RCMods<-filter(Mods, Enterprise=="Budget Conferencing_Exter")
RCemails<-select(RCMods, ClientID, Email, Mod.Phone, Address, City, Zip, Moderator.First.Name, Moderator.Last.Name)
GMemails<-select(GMod, ClientID, Email, Mod.Phone, Address, City, Zip)
AGBRC$Start<-paste(AGBRC$StartDate, AGBRC$StartTime)
AGBRC$Start<-as.numeric(as.POSIXct(AGBRC$Start, format="%d/%m/%Y %H:%M:%S"))
AGBGM$Start<-paste(AGBGM$StartDate, AGBGM$StartTime)
AGBGM$Start<-as.numeric(as.POSIXct(AGBGM$Start, format="%d/%m/%Y %H:%M:%S"))
blahRC<-select(AGBRC, -c(TerritoryCode, SalesRepName,BillToID, Region, EnterpriseID, EnterpriseName, PONumber, UNIQUEROWID, StartDate, StartTime, EndDate, EndTime))
testRC<-left_join(blahRC, RCemails)
testRC<-select(testRC, ClientID, ModeratorName, CompanyID, CompanyName, ConferenceID, Duration, DNIS,
DNIS, NumberDialed, DNISDesc, Description, CallerID, CallerType, Bridge, UNIQUECONFID, Start, Email, Moderator.First.Name, Address, Zip,
Moderator.Last.Name, City, Mod.Phone)
colnames(testRC)<-c("Prop:Client ID foo", "Prop:Moderator Name foo", "Prop:Company ID foo", "Prop:Company Name foo",
"Prop:Conference ID foo", "Prop:Duration foo",
"Prop:DNIS foo", "Prop: Number Dialed foo", "Prop:DNIS Desc foo", "Prop:Description foo", "Prop:Caller ID foo",
"Prop:Caller Type foo", "Prop:Bridge foo", "Prop:Unique Conference ID foo", "Timestamp", "Identity", "Prop:First Name foo", "Prop:Address foo",
"Prop:Postcode foo",
"Prop:Last Name foo", "Prop:Suburb foo", "Prop:Moderator Phone Number foo")
testRC$Event<-"Conference foo"
blahGM<-select(AGBGM, -c(TerritoryCode, SalesRepName,BillToID, Region, EnterpriseID, EnterpriseName, PONumber, UNIQUEROWID, StartDate, StartTime, EndDate,
EndTime))
unique(blahGM$ClientID)
summary(blahGM$ClientID)
summary(blahGM)
summary(GMemails)
blahGM$CallerID[which(blah$CallerID=="")]<-"Unknown"
blahGM$CallerID[which(blah$CallerID=="")]<-"Blocked"
blahGM$CallerID[which(blahGM$CallerID=="")]<-"Blocked"
blahGM$CallerID[which(blahGM$CallerID==" ")]<-"Blocked"
table(blahGM$CallerID)
summary(blahGM$CallerID)
blahGM$CallerID[which(blahGM$CallerID==NA)]<-"Blocked"
blahGM$CallerID[is.na(blahGM$CallerID)]<-"Blocked"
blahGM$CallerID[which(blahGM$CallerID==NA),]<-"Blocked"
blahGM$CallerID[which(is.na(blahGM$CallerID)),]<-"Blocked"
blahGM$CallerID[which(is.na(blahGM$CallerID)==T),]<-"Blocked"
blahGM[which(is.na(blahGM$CallerID)==T),]<-"Blocked"
blahGM$CallerID[which(is.na(blahGM$CallerID)==T),]<-"Blocked"
blahGM$CallerID<-str_replace_all(blahGM$CallerID, NA, "Blocked")
blahGM$CallerID<-str_replace_all(blahGM$CallerID, "NA", "Blocked")
summary(blahGM)
blahGM<-str_replace_all(blahGM, "NA", "Blocked")
blah[is.na(blah)]<-"Unknown"
blahGM[is.na(blahGM)]<-"Unknown"
install.packages("MASS")
library(RSelenium)
?RSelenium
?remoteDriver
library(dplyr)
library(stringr)
install.packages("maps")
install.packages("mapdata")
library(map)
library(maps)
library(mapdata)
map('worldHires')
map('worldHires', "Australia")
map('worldHires', "Australia", "Sydney")
map('worldHires', c("Australia", "Sydney")
)
?map
map('worldHires', "Australia", fill=T)
Socceroos <- read.csv("D:/Users/soates/Downloads/Socceroos.csv")
View(Socceroos)
map('worldHires', Socceroos$League, fill=T)
map('worldHires', Socceroos$League, fill=T, col="red")
map('worldHires', Socceroos$League, fill=T, col=c("red", "blue"))
map('worldHires', Socceroos$League, fill=T, col=c("red", "blue"))
map('worldHires')
map('worldHires', Socceroos$League, fill=T, col=c("red", "blue"), boundary=T)
map('worldHires', Socceroos$League, col=c("red", "blue"), boundary=T)
map('worldHires', Socceroos$League, col=c("red", "blue"), boundary=F)
SoO2014 <- read.delim("D:/Users/soates/Desktop/SoO2014.tsv")
View(SoO2014)
SoO2014 <- read.delim("D:/Users/soates/Desktop/SoO2014.tsv")
View(SoO2014)
?table
SO<-SoO2014
table(SO$AUS2013~SO$State)
table(SO$AUS2013,SO$State)
table(SO$State, SO$AUS2013)
plot(table(SO$State, SO$AUS2013))
library(dplyr)
library(stringr)
library(ggplot2)
library(knitr)
library(mapdata)
library(maps)
map("worldHires", "Queensland")
map("worldHires", "Australia")
map("worldHires", "Australia:Tasmania")
map("worldHires", "Australia:New South Wales")
map("worldHires", "Australia:Queensland")
map("worldHires", c("Australia",Australia:Queensland"))
)
map("worldHires", c(regions="Australia",Australia:Queensland"))
""
map("worldHires", c(regions="Australia","Australia:Queensland"))
map("worldHires", "Australia:Tasmainia")
install.packages("oz")
library(oz)
oz()
oz(6)
ozRegion()
library(ggplot2)
load("ozdata.rda"
)
nsw()
nsw()
oz()
nsw()
qld()
oz(sections=c(3, 4))
oz(sections=c(3, 4))
library(maptools)
install.packages("maptools")
library(maptools)
install.packages("rgeos")
library(maptools)
aus<-readShapePoly("aust_states.shp")
aus<-readShapePoly("D:/Users/soates/Desktop/SO/aust_states.shp")
install.packages("caret")
install.packages(c("maptools", "Rcpp", "rgeos"))
install.packages("hts")
install.packages(c("mice", "wordcloud"))
install.packages("Matrix")
install.packages("BradleyTerry2")
install.packages("egonet")
library(egonet)
library(igraph)
install.packages("igraph")
data<-read.csv('http://www.quandl.com/api/v1/datasets/PIKETTY/T10_1US1.csv?&trim_start=1916-12-31&trim_end=2000-12-31&sort_order=desc', colClasses=c('Date'='Date'))
head(data)
str(data)
datats<-as.ts(data)
plot(datats)
?as.ts
install.packages("mgcv")
library(ggvis)
mtcars %>% ggvis(~mpg, ~wt) %>% layer_points()
mtcars %>%
ggvis(~wt) %>%
layer_histograms(binwidth = input_slider(0, 2, step = 0.1))
Employment.by.State.and.Industry <- read.delim("D:/Users/soates/Downloads/Employment by State and Industry.txt")
View(Employment.by.State.and.Industry)
plot(Employment.by.State.and.Industry)
Emp<-Employment.by.State.and.Industry
Emp$X<-NULL
?as.ts
Emp<-as.ts(data=Emp, start=c(1984, 11), frequency=1/4)
Emp1<-as.ts(x=Emp, start=c(1984, 11), frequency=1/4)
plot(Emp1)
library(ggplot2)
qplot(Emp1)
ggplot(Emp1, aes(x=Emp1))+geom_line()
ggplot(Emp1+geom_line()
)
ggplot(Emp1)+geom_line()
install.packages("rgl")
install.packages("mgcv")
install.packages(c("knitr", "dplyr", "plyr", "ggplot2", "ggvis", "caret", "lattice", "reshape2", "XML", "shiny"))
library(plyr)
library(dplyr)
library(reshape2)
library(stringr)
library(ggplot2)
library(ggvis)
library(caret)
library(forecast)
rogues<-seq(100:1)
head(rogues)
rogues<-seq(-100:1)
rogues<-seq(-100)
head(rogues)
rogues<-seq(100, 1)
financial_planners<-seq(0, 100)
financial_planners<-seq(1, 100)
wrw<-as.data.frame(rogues, financial_planners)
wrw<-as.data.frame(c(rogues, financial_planners))
wrw<-as.data.frame(cbind(rogues, financial_planners))
summary(wrw)
plot(wrw)
ggplot(wrw, aes(x=rogues, y=financial_planners))+geom_line()
ggplot(wrw, aes(x=rogues))+geom_line()
ggplot(wrw, aes(y=rogues))+geom_line()
wrw$time<-seq(1:100)
ggplot(wrw, aes(x=time, y=rogues))+geom_line()
ggplot(wrw, aes(x=time, y=rogues))+geom_line()+geom_line(data=wrw, y=financial_planners)
wrw$time<-seq(100, 1)
ggplot(wrw, aes(x=time, y=rogues))+geom_line()+geom_line(data=wrw, y=financial_planners)
head(wrw$time)
ggplot(wrw, aes(x=time, y=rogues))+geom_line()+geom_line(data=wrw, y=financial_planners)
wrw$time<-seq(1914:2014)
wrw$time<-seq(1915:2014)
ggplot(wrw, aes(x=time, y=rogues))+geom_line()+geom_line(data=wrw, y=financial_planners)
ggplot(wrw, aes(x=time, y=rogues))+geom_line()+geom_line(data=wrw, y=financial_planners)
ggplot(wrw, aes(x=time, y=rogues, color="red"))+geom_line()+geom_line(data=wrw, y=financial_planners)
ggplot(wrw, aes(x=time, y=rogues))+geom_line(fill="red")+geom_line(data=wrw, y=financial_planners)
ggplot(wrw, aes(x=time, y=rogues))+geom_line(fill="red")+geom_line(data=wrw, y=financial_planners, fill="green")
ggplot(wrw, aes(x=time, y=rogues))+geom_line(aes(fill="red"))+geom_line(aes(data=wrw, y=financial_planners, fill="green"))
ggplot(wrw, aes(x=time, y=rogues))+geom_line(aes(fill="red"))+geom_line(data=wrw, aes(y=financial_planners, fill="green"))
ggplot(wrw, aes(x=time, y=rogues))+geom_line(aes(fill="red"))+geom_line(data=wrw, aes(y=financial_planners, color="green"))
ggplot(wrw, aes(x=time, y=rogues))+geom_line(aes(fill="red"))+geom_line(data=wrw, aes(y=financial_planners, fill="green"))
ggplot(wrw, aes(x=time, y=rogues))+geom_line(aes(color="red"))+geom_line(data=wrw, aes(y=financial_planners, color="green"))
ggplot(wrw, aes(x=wrw$time, y=rogues))+geom_line(aes(color="red"))+geom_line(data=wrw, aes(y=financial_planners, color="green"))
ggplot(wrw, aes(x=time, y=rogues))+geom_line(aes(color="red"))+geom_line(data=wrw, aes(y=financial_planners, color="green"))
install.packages("SparseM")
install.packages(c("class", "mgcv"))
install.packages(c("hts", "markdown", "mime", "shiny"))
setwd("~/GitHub/srepho.github.io/Churn")
churn <- read.csv("~/GitHub/srepho.github.io/Churn/churn.txt")
View(churn)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(reshape2)
library(caret)
set.seed(12)
trainIndex <- caret::createDataPartition(churn$Churn., p = .75, list = FALSE, times = 1)
churnTrain <- churn[ trainIndex,]
churnTest <- churn[-trainIndex, ]
churnTrain$Phone<-NULL
churnTest$Phone<-NULL
churnTrain$Area.Code<-as.factor(churnTrain$Area.Code)
churnTest$Area.Code<-as.factor(churnTest$Area.Code)
install.packages("RJSONIO")
install.packages("e1071")
install.packages("randomForest")
?predict
lrmodel<-train(churnTrain$Churn.~., data=churnTrain, method="rf", trainControl = c(method = "adaptive_cv", number = 10, repeats = 5, classProbs = TRUE, summaryFunction = twoClassSummary, adaptive = list(min = 10, alpha = 0.05, method = "gls", complete = TRUE)), metric="Kappa", classwt=0.9)
lrmodel<-train(churnTrain$Churn.~., data=churnTrain, method="rf", trainControl = c(method = "adaptive_cv", number = 10, repeats = 5, classProbs = TRUE, summaryFunction = twoClassSummary, adaptive = list(min = 10, alpha = 0.05, method = "gls", complete = TRUE)), metric="Kappa", classwt=c(.9, .1))
lrmodel
confusionMatrix(lrmodel)
set.seed(12)
lrmodel<-train(churnTrain$Churn.~., data=churnTrain, method="rf", trainControl = c(method = "adaptive_cv", number = 10, repeats = 5, classProbs = TRUE, summaryFunction = twoClassSummary, adaptive = list(min = 10, alpha = 0.05, method = "gls", complete = TRUE)), metric="Kappa", cutoff=c(.9, .1))
lrmodel
confusionMatrix(lrmodel)
getTrainPerf(lrmodel)
head(churn$Churn.)
